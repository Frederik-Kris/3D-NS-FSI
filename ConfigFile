/* ________________________________________________________________________________________________
 *
 * CONFIGURATION FILE
 * 
 * This file specifies all settings, constants and parameters for the program. The intention is
 * that it should not be necessary to change or comment/uncomment stuff all around the source code
 * to customize a simulation. Ideally, everything should be specified here.
 *
 * To add a parameter/setting, there are 3 steps:
 *  - Add it here, with a name, value and comments
 *  - Add it as a data-member of the ConfigSettings class, in ConfigSettings.h
 *  - Give it a lookup in the function ConfigSettings::readSettingValues, in ConfigSettings.cpp
 * ________________________________________________________________________________________________
 */

//-------------------------------------------------------------------------------------------------------------------------------
// Simulation Parameters
//-------------------------------------------------------------------------------------------------------------------------------

// Specify whether to continue simulating from output data, using the last outputted time level as initial condition.
// NB! Coherence between parameters for old and new simulation is not checked. I.e., don't change grid size etc.
continueSimulation = false

// Number of grid points in x, y and z direction, respectively:
// The minimum is 3 in inlet/outlet direction, 3 in periodic direction, 4 in symmetry direction
NI = 100
NJ = 50
NK = 1

// Dimensionless size of the domain:
L_x = 40.
L_y = 20.
L_z = 0.

// Local grid refining regions:
// These are the places where we split the domain into different regions with different refinement levels.
// If empty list "[]" then there is no split in that direction. E.g., 2D cases etc.
// The values are guiding. The actial borders must appear on actual grid lines.
refineBoundX = [8., 9., 11., 12.]
refineBoundY = [8., 9., 11., 12.]
refineBoundZ = []

// Regions where we set a given refinement level:
// Given as array "[]" of groups "{}". Each group should be {indices=[ , , ], level= }
refineLevels = (
// example:	{indices = [2,2,0]; level = 2},	‚Üê remove comma if there's only one
		{indices = [2,2,0]; level = 2}
		)

// Stopping criterion. Should be either "timesteps", to compute an exact number of timesteps, 
// or "end_time" to simulate until a given time. See the next two settings.
stopCriterion = "end_time"

// Number of timesteps to compute. If outstopTimeLevel is zero or negative, the simulation result will
// be the the initial condition. With stopTimeLevel = 1, one timestep will be computed, etc.
// This also applies when simulation is continued from previous result. The setting then says how
// many timesteps to march from the imported solution.
// This setting is only used if stopCriterion = "timesteps".
stopTimeLevel = 1

// How long to simulate. The last timestep is adapted to hit this time exactly. If t_end is zero
// or negative, the simulation result will be the initial condition.
// This setting is only used if stopCriterion = "end_time".
t_end = 200.1

// Constant specifying the inviscid stability criterion.
// Theoretically, it should work as long as it's <2, but some margin may be necessary.
convStabilityLimit = 0.9

// Constant specifying the viscous stability criterion
// Should give stability when >-1.5 , but some margin may be necessary.
viscStabilityLimit = -0.68

// Number of timesteps between each time the filter is applied to the solution. Putting zero or negative interval disables filtering.
// The first value in filterIntervals is the interval from simulation start, until time equals the first value in filterIntervalChangeTimes.
// As time t hits the thresholds in filterIntervalChangeTimes, the intervals change according to the values in filterIntervals.
// If filterIntervals has one more entry than filterIntervalChangeTimes, then the last value in filterIntervals will be used
// forever after the last time threshold in filterIntervalChangeTimes is surpassed. Otherwise filtering is disabled after that.
filterIntervals = [30, 150, 1000]
filterIntervalChangeTimes = [200., 400., 900.]

//-------------------------------------------------------------------------------------------------------------------------------
// Parameters for output, e.g. saving/plotting solutions
//-------------------------------------------------------------------------------------------------------------------------------

// Wall clock time (in seconds) between status/progression reports written to screen.
statusReportInterval = 2.

// Booleans to specify what flow variables to store:
saveDensity     = true
saveMomentum    = false
saveEnergy      = false
saveVelocity    = true
savePressure    = true
saveTemperature = true
saveViscosity   = false
saveThermalCond = false

// Save initial condition?
saveIC = false

// Save final solution? (Last time level, at time t_end)
saveFinal = false

// Save at constant intervals? (Not including IC, interval length specified below)
saveIntervals = true

// Dimensionless time between each save (if saveIntervals=true):
// If zero, saves every time level.
savePeriod = 20.

// Dimensionless times to start and stop periodic saving (if saveIntervals=true):
// If ...StartTime <= 0, then it saves periodically from simulation start.
// If ...EndTime <= 0, then it saves periodically until simulation end.
saveIntervalsStartTime = 0.
saveIntervalsEndTime = 0.

// Save convergence history in the form of 2-norm of the change between consecutive time levels?
// Must be "none" for no save, "density" to save only for density, or "all" for all conserved variables.
saveConvergenceHistory = "all"

//-------------------------------------------------------------------------------------------------------------------------------
// Physical Constants
//-------------------------------------------------------------------------------------------------------------------------------

// Ratio of specific heats:
Gamma = 1.4

// Reference Prandtl number:
Pr = 0.72

// Specific gas constant:
R = 287.

// Reynolds number (rho_0 * u_ref * L / mu_0):
// NB! Remember that viscosity is non-dimensionalized using the stagnation Reynolds number (rho_0 * c_0 * L / mu_0)
// Remember to factor in the length scale if it is not 1.
Re = 40.

// Constants C_1 and C_2 in Sutherland's law:
sutherlands_C1 = 1.458E-6
sutherlands_C2 = 110.4

// Reference Mach number:
M_0 = 0.25

// Reference temperature IN KELVIN, NOT DIMENSIONLESS:
T_0 = 300.





